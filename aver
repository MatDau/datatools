#!/usr/bin/python

# aver
# Jim Bagrow
# Last Modified: 2011-04-07

"""
    This file is part of Datatools.
    
    Datatools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    Datatools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with Datatools.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys, os
import numpy

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [-u|--uniq|--unique] [-l|--log] [-e|--errorbars] [number of bins] 

Average/smooth XY-data received from STDIN by binning the X-values then, for
  each x-bin, compute the mean of all the y-values within that bin.  Using -u,
  --uniq, or --unique will compute the mean of all corresponding y-values for
  each unique x-value.  This is useful for integer-valued x-data, for example,
  where binning isn't necessary. Use -l or --log for logarithmically-spaced
  x-bins.  Use -e or --errorbars to include a third column containing the
  standard deviation of each x bin's y-values.

Example:
  cat tutorial/xy.dat | %s | plot """ % (name,name)


def _mean_stdv(data):
    return "%f %f" % (numpy.mean(data),numpy.std(data))

def _mean_only(data):
    return "%f" % numpy.mean(data)


def uniq_binning(errorbars=False):
    """for each unique x-value, print the mean of all y-values"""
    F = _mean_only
    if errorbars:
        F = _mean_stdv
    
    # data is assumed to be two columns:
    data = [ x.strip().split() for x in sys.stdin.readlines() ]
    
    x2listy = {}
    for x,y in data:
        try:
            x = int(x)    # is x an int?
        except ValueError:
            pass          # nope, keep it a string...
        y = float(y)
        try:
            x2listy[x].append(y)
        except KeyError:
            x2listy[x] = [y]
    
    for x in sorted(x2listy.keys()):
        print x, F(x2listy[x])


def aver_binning(num_bins, log=False, errorbars=False):
    """bin the y-values into linear bins by x, print bin center
    and mean of all y values within that bin.
    """
    F = _mean_only
    if errorbars:
        F = _mean_stdv
    
    # data is assumed to be two columns:
    data = [ map(float, x.strip().split()) for x in sys.stdin.readlines() ]
    X,Y = zip(*data)
    
    if num_bins is None:
        from math import sqrt
        num_bins = int(sqrt(len(data))) + 1
    
    if log:
        minVal = numpy.log10(min(X)-1e-8) # safe?
        maxVal = numpy.log10(max(X)+1e-8)
        bin_edges = numpy.logspace( minVal, maxVal, num_bins+1 )
    else:
        bin_edges = numpy.linspace( min(X),max(X), num_bins+1 )
    
    bL,bR, data_in_bin, b = bin_edges[0],bin_edges[1], [], 0
    for x,y in sorted(data):
        if x > bR: # this x,y is in next bin, so finish off current bin
            print 0.5*(bL+bR), F( data_in_bin ) # is this safe with log bin?
            b += 1
            bL, bR = bin_edges[b], bin_edges[b+1]
            data_in_bin = []
        data_in_bin.append( y )
    print 0.5*(bL+bR), F( data_in_bin ) # don't forget last bin!


if __name__ == '__main__':
    if '-h' in sys.argv or '--help' in sys.argv:
        sys.exit( usage )
    
    # check if u or uniq or unique is a commandline arg:
    args = set( a.lower().replace('-','') for a in sys.argv[1:] )
    
    errorbars = False
    if set(['e','error','errorbars']) & args:
        errorbars = True
    
    if set(['u','uniq','unique']) & args:
        uniq_binning(errorbars=errorbars)
    else:
        log = False
        if set(['l','log']) & args:
            log = True
        try:
            num_bins = int(sys.argv[-1])
        except ValueError:
            num_bins = None
        aver_binning(num_bins, log=log, errorbars=errorbars)
    
