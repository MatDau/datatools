#!/usr/bin/python

# el2info
# Jim Bagrow
# Last Modified: 2011-04-07

import sys, os
try:
    import networkx
except ImportError:
    sys.exit("networkx is required, see http://networkx.lanl.gov/")

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s

Compute a number of statistics for the network whose edgelist was received
  from STDIN.  Edgelist delimiter must be tab or space. An example edgelist is
  provided: <DATATOOLS>/tutorial/karate.edgelist.  Only unweighted, undirected
  networks are currently supported.

Example:
  cat edgelist.txt | %s """ % (name,name)

error = "%s takes no arguments, run `%s --help` for info." % (name,name)

def get_edge(line):
    """First try to split with tab, then with space. No other delimiters are
    currently supporting...
    """
    L = line.strip().split("\t")[:2]
    if len(L) == 2:
        return L
    return line.strip().split(" ")[:2]


if __name__ == '__main__':
    if '-h' in sys.argv or '--help' in sys.argv:
        sys.exit(usage)
    elif len(sys.argv) > 1:
        sys.exit(error)
    
    # read edgelist from stdin:
    edges = [ get_edge(line) for line in sys.stdin.readlines() ]
    
    G = networkx.Graph() # only unweighted, undirected graphs are supported...
    G.add_edges_from( edges )
    
    N   = G.number_of_nodes()
    M   = G.number_of_edges()
    n2c = networkx.clustering(G)
    if hasattr(n2c, 'values'):
        C   = 1.0 * sum(n2c.values()) / len(n2c)
    else: # older version of networkx
        C   = 1.0 * sum(n2c) / len(n2c) 
    T   = networkx.transitivity(G)
    
    L       = networkx.connected_components(G)
    N_comps = len(L)
    
    flt_fmt = "%0.8f"
    print "       Number of Nodes =", N
    print "       Number of Links =", M
    print "          Link Density =", flt_fmt % (M / (N*(N-1)/2.0))
    print "        Average Degree =", flt_fmt % (2.0 * M / N)
    print "Clustering Coefficient =", flt_fmt % C
    print "          Transitivity =", flt_fmt % T
    print "  Number of Components =", N_comps
    if N_comps == 1:
        print "              Diameter =", networkx.diameter(G)
    else:
        print "       Fraction in GCC =", flt_fmt % (1.0 * len(L[0]) / N)
    
