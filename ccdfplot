#!/usr/bin/env python

# ccdfplot
# Jim Bagrow
# Last Modified: 2011-06-30

import sys, os
from itertools import izip

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options]

Plot ccdf X-data received from STDIN.

Options:
  -p              : Passes a string to gnuplot's plot directive.  The
                    subsequent arg must be valid gnuplot.  For example 
                    -p 'with lines' will plot the XY-data using lines instead
                    of linespoints.
  -c              : Passes a command to gnuplot.  The subsequent arg must be 
                    valid gnuplot.  The command will be run before gnuplot's 
                    plot is executed.  For example,
                    -c 'set xlabel "x"; set ylabel "y"' will label the graph.
  -lx  | --logx   : Use logarithmic x-axis.
  -ly  | --logy   : Use logarithmic y-axis.
  -lxy | --logxy  : Use double logarithmic axes.
  -l   | --log    : Shortcut for -lxy / --logxy.

Example:
  cat tutorial/xy.dat | %s -c 'set xr [1:10]' """ % (name,name)

def write(data,filename):
    data.sort()
    N = 1.0*len(data)
    f = open(filename, 'w')
    if name == "ccdfplot":
        f.write("\n".join( "%f %f" % (x,1.0-(n+1)/N) for n,x in enumerate(data) ))
    else:
        f.write("\n".join( "%f %f" % (x,(n+1)/N    ) for n,x in enumerate(data) ))
    f.write("\n")
    f.close()


if __name__ == '__main__':
    
    # parse args:
    argv = [ s.lower() for s in sys.argv[1:] ]
    if '-h' in argv or '--help' in argv:
        sys.exit( usage )
    A = set(argv)
    
    logX,logY = "",""
    if set(["-lx","--logx"]) & A:
        logX = "set log x"
    if set(["-ly","--logy"]) & A:
        logY = "set log y"
    if set(["-l","-lxy","--log","--logxy"]) & A:
        logX,logY = "set log x","set log y"
    
    cstr=''
    pstr='w lp pt 4'
    for i,arg in enumerate(argv):
        if arg == "-p":
            pstr = argv[i+1]
        if arg == "-c":
            cstr = argv[i+1]
    
    
    # read data stdin:
    D = [ map(float, l.strip().split()) for l in sys.stdin if l.strip() ]
    try:
        L = zip(*D) # transpose
    except:
        sys.exit("Data malformed, check input.")
    num_curves = len(L)
    
    files = [ "/tmp/file%i.tmp" % i for i in xrange(num_curves) ]
    for data,f in izip(L,files):
        write(list(data), f)
    
    
    # build gnuplot strings:
    plotstr = "plot '%s' %s title 'column 1'" % (files[0], pstr)
    for i in xrange(1,num_curves):
        plotstr += ", '%s' %s title 'column %i'" % (files[i], pstr, i+1)
    
    cmd = """gnuplot << EOF
    set term x11 enhanced persist
    unset key
    %s
    %s
    %s
    %s
    """ % (logX,logY, cstr, plotstr)
    
    # run gnuplot and clean up:
    os.system( cmd )
    for f in files:
        os.system( "rm -f %s" % f )


