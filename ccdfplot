#!/usr/bin/env python

# ccdfplot
# Jim Bagrow
# Last Modified: 2011-12-11

import sys, os
from itertools import izip

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options]

Plot empirical (complementary) cumulative distribution of X-data received from
STDIN.  Multiple (c)cdfs can be plotted by passing multiple columns of X-data
through STDIN (assuming each distribution has the same number of datapoints) or
by giving a list of files each containing X-data.

Options:
  -p              : Passes a string to gnuplot's plot directive.  The
                    subsequent arg must be valid gnuplot.  For example 
                    -p 'with lines' will plot the XY-data using lines instead
                    of linespoints.
  -c              : Passes a command to gnuplot.  The subsequent arg must be 
                    valid gnuplot.  The command will be run before gnuplot's 
                    plot is executed.  For example,
                    -c 'set xlabel "x"; set ylabel "y"' will label the graph.
  -x   | --funcs  : A comma-separated list of functions to plot after other
                    curves are drawn.  For example: -x 'x**0.5,cos(x)'.  The
                    variable should always be 'x'.
  -f   | --files  : Specify list of files (following this argument) that each
                    contain X-data to plot.  Data is not read from STDIN.
  -lx  | --logx   : Use logarithmic x-axis.
  -ly  | --logy   : Use logarithmic y-axis.
  -lxy | --logxy  : Use double logarithmic axes.
  -l   | --log    : Shortcut for -lxy / --logxy.
  -k   | --key    : Shortcut for gnuplot to show the key (legend).
         --lbl    : Shortcut to label the graph axes.  --lbl "x;y" is
                    equivalent to -c 'set xlabel "x"; set ylabel "y"'.
  -xr  | --xrange : Set the range of the x-axis.  For example, -xr 0:1, limits
                    the x-axis to between 0 and 1.  An endpoint of the range
                    may be omitted, e.g. -xr :1 will only force the right end
                    of the axis to stop at 1.
  -yr  | --yrange : Same as xrange but for the y-axis.

Example:
  cat tutorial/x.dat | %s -c 'set xr [1:10]' """ % (name,name)

def write(data,filename):
    data.sort()
    N = 1.0*len(data)
    f = open(filename, 'w')
    if name == "ccdfplot":
        f.write("\n".join( "%f %f" % (x,1.0-(n+1)/N) for n,x in enumerate(data) ))
    else:
        f.write("\n".join( "%f %f" % (x,(n+1)/N    ) for n,x in enumerate(data) ))
    f.write("\n")
    f.close()


if __name__ == '__main__':
    
    # parse args:
    argv = [ s.lower() for s in sys.argv[1:] ]
    if '-h' in argv or '--help' in argv:
        sys.exit( usage )
    A = set(argv)
    
    logX,logY = "",""
    force_key = False
    if set(["-lx","--logx"]) & A:
        logX = "set log x"
    if set(["-ly","--logy"]) & A:
        logY = "set log y"
    if set(["-l","-lxy","--log","--logxy"]) & A:
        logX,logY = "set log x","set log y"
    
    if "-k" in A or "---key" in A:
        force_key = True
    
    fstr=''
    cstr=''
    pstr='w lp pt 4'
    list_infiles = []
    for i,arg in enumerate(argv):
        if os.path.exists(arg): # is a file
            continue
        if arg == "-p":
            pstr = argv[i+1]
        if arg == "-c":
            cstr = argv[i+1]
        if arg == "--lbl" or arg == "-lbl":
            xy = tuple(argv[i+1].split(";"))
            if len(xy) == 2:
                cstr += "set xlabel \"%s\"; set ylabel \"%s\"; " % xy
            else:
                cstr += "set xlabel \"%s\"; " % xy
        if arg in ['-x', '--funcs','--functions']:
            fstr = argv[i+1]
        if arg in ["-xr", "--xrange"]:
            xrstr = argv[i+1]
            xrstr.replace(",",":").replace(";",":").replace("_",":")
            cstr += "set xrange [%s]; " % xrstr
        if arg in ["-yr", "--yrange"]: # two or more, use a for
            yrstr = argv[i+1]
            yrstr.replace(",",":").replace(";",":").replace("_",":")
            cstr +=  "set yrange [%s]; " % yrstr
        if arg == "-f" or arg == "--files":
            list_infiles = [ f for f in argv[(i+1):] if os.path.exists(f) ]
            if not list_infiles:
                sys.exit( "Error: input files were specified, but none found.")
    
    
    # read data:
    if list_infiles: # from files
        L = []
        for f in list_infiles:
            L.append( [float(l.strip()) for l in open(f) if l.strip()] )
        list_titles = [l.replace("_","\_") for l in list_infiles] # since enhanced
    else:            # from stdin
        D = [ map(float, l.strip().split()) for l in sys.stdin if l.strip() ]
        try:
            L = zip(*D) # transpose
        except:
            sys.exit("Data malformed, check input.")
        list_titles = ["column %i" % i for i in range(1,len(L)+1)]
    num_curves = len(L)
    
    files = [ "/tmp/file%i.tmp" % i for i in xrange(num_curves) ]
    for data,f in izip(L,files):
        write(list(data), f)
    
    
    # build gnuplot strings:
    kstr = "set key" if force_key else ""
    plotstr = "plot '%s' %s title '%s'" % (files[0], pstr,list_titles[0])
    for i in xrange(1,num_curves):
        plotstr += ", '%s' %s title '%s'" % (files[i], pstr, list_titles[i])
    if fstr:
        plotstr += ","+fstr
    
    cmd = """gnuplot << EOF
    set term x11 enhanced persist
    unset key
    %s
    %s
    %s
    %s
    %s
    """ % (logX,logY, cstr,kstr plotstr)
    
    # run gnuplot and clean up:
    os.system( cmd )
    for f in files:
        os.system( "rm -f %s" % f )


